digraph "ns3::SpectrumModel::End"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="RL";
  Node1 [label="ns3::SpectrumModel::End",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Const Iterator to the model Bands container end."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ns3::SpectrumConverter\l::SpectrumConverter",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_spectrum_converter.html#a1e759b343b89a981e3b774ed15aacdad",tooltip="Create a SpectrumConverter class that will be able to convert ValueVsFreq instances defined over one ..."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ns3::SpectrumValue\l::ConstBandsEnd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_spectrum_value.html#a1913b6212ea68953fd3d9921dc045a64",tooltip=" "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ns3::ConstantSpectrumPropagation\lLossModel::DoCalcRxPowerSpectralDensity",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_constant_spectrum_propagation_loss_model.html#aa886d0fb34bf13997921eb0bcfbba014",tooltip=" "];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="ns3::FriisSpectrumPropagation\lLossModel::DoCalcRxPowerSpectral\lDensity",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_friis_spectrum_propagation_loss_model.html#a6c8355c3ad19c398b0749a930ec58cfc",tooltip=" "];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="TvSpectrumTransmitterTest\lCase::DoRun",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tv_spectrum_transmitter_test_case.html#ad94f615589a3c3e1216415ed943bcc26",tooltip="Implementation to actually run this TestCase."];
  Node3 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="ns3::ShannonSpectrumError\lModel::EvaluateChunk",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_shannon_spectrum_error_model.html#aef33d9188f5a6b43f908bf72401fe549",tooltip="Evaluates a chunk."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="ns3::SpectrumModel\l::IsOrthogonal",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_spectrum_model.html#a14b2ca7c3d10ac1b86bd300d06cca2b2",tooltip="Check if another SpectrumModels has bands orthogonal to our bands."];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="ns3::MultiModelSpectrumChannel\l::AddRx",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_multi_model_spectrum_channel.html#af365f7a37625876a9e476e6eb6376f7e",tooltip="Add a SpectrumPhy to a channel, so it can receive packets."];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="ns3::MultiModelSpectrumChannel\l::FindAndEventuallyAddTxSpectrumModel",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_multi_model_spectrum_channel.html#a6056692c09015bd3d81df0d536a804c5",tooltip="This method checks if m_rxSpectrumModelInfoMap contains an entry for the given TX SpectrumModel."];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="ns3::MultiModelSpectrumChannel\l::StartTx",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_multi_model_spectrum_channel.html#ab5b8cfe54c081f858014b133d026ed26",tooltip="Used by attached PHY instances to transmit signals on the channel."];
}
