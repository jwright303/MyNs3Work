digraph "ns3::WifiTxVector::SetChannelWidth"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="RL";
  Node1 [label="ns3::WifiTxVector::\lSetChannelWidth",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Sets the selected channelWidth (in MHz)"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ns3::IdealWifiManager\l::BuildSnrThresholds",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ideal_wifi_manager.html#a9324f6fe2c6e6b7b2212f4aac69f9dee",tooltip="Construct the vector of minimum SNRs needed to successfully transmit for all possible combinations (r..."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ns3::IdealWifiManager\l::DoInitialize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ideal_wifi_manager.html#a678947f49366ca1734b6299b667845da",tooltip="Initialize() implementation."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ns3::IdealWifiManager\l::GetSnrThreshold",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ideal_wifi_manager.html#ae91f9cb4e73c9743497c2d775b482385",tooltip="Return the minimum SNR needed to successfully transmit data with this WifiTxVector at the specified B..."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="ns3::IdealWifiManager\l::DoGetDataTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ideal_wifi_manager.html#a2e7570eb1f5cbef1067cfb714e94218e",tooltip=" "];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="ns3::IdealWifiManager\l::DoGetRtsTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ideal_wifi_manager.html#ab263f9a1c04747b2c2b55774bf97854a",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="ns3::MinstrelHtWifiManager\l::CalculateMpduTxDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_minstrel_ht_wifi_manager.html#a84b4c0a22ed2444b640efca30a5e293a",tooltip="Estimates the TxTime of a frame with a given mode and group (stream, guard interval and channel width..."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="ns3::MinstrelHtWifiManager\l::DoInitialize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_minstrel_ht_wifi_manager.html#a3c5c32d2a58fb45a922e435192b0cf43",tooltip="Initialize() implementation."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="TxDurationTest::CheckHeMu\lTxDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tx_duration_test.html#aa0304b79f39966f80588360632659222",tooltip="Check if the overall Tx duration returned by WifiPhy for a HE MU PPDU corresponds to a known value."];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="TxDurationTest::DoRun",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tx_duration_test.html#a92181289166e9577bebdbdb352169597",tooltip="Implementation to actually run this TestCase."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="TxDurationTest::CheckPayload\lDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tx_duration_test.html#a8666c54033e392b15feb1d2aa78bd1c7",tooltip="Check if the payload tx duration returned by InterferenceHelper corresponds to a known value of the p..."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="TxDurationTest::CheckTxDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tx_duration_test.html#a86485ba9721aa086d5a487588b856b8a",tooltip="Check if the overall tx duration returned by InterferenceHelper corresponds to a known value of the p..."];
  Node12 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="WifiErrorRateModelsTestCase\lMimo::DoRun",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_wifi_error_rate_models_test_case_mimo.html#a80c805e3cde3b802ea49f023415b5542",tooltip="Implementation to actually run this TestCase."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="ns3::VsaManager::DoSendVsa",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_vsa_manager.html#a3d56f68f3b98bd45ccc6c56c9a6244db",tooltip=" "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="ns3::VsaManager::DoRepeat",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_vsa_manager.html#a5731f78c47436e8cb495052b1fe42f65",tooltip=" "];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="ns3::VsaManager::SendVsa",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_vsa_manager.html#af896634c89ed0725215aa5da43445295",tooltip=" "];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="ns3::MacLow::GetAckTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#aae813ebc059b7e6aa1c88607e2969936",tooltip="Return a TXVECTOR for the Ack frame given the destination and the mode of the Data used by the sender..."];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="ns3::MacLow::GetAckTxVector\lForData",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#aaa82a9f5d9971541a7135f39c4287104",tooltip="Return a TXVECTOR for the BlockAck frame given the destination and the mode of the Data used by the s..."];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="ns3::MacLow::GetAckDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a7bd44324cf1996798e5346572f873bcc",tooltip="Return the time required to transmit the Ack to the specified address given the TXVECTOR of the Data ..."];
  Node17 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="ns3::MacLow::SendAckAfterData",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a8db1635644b89072dfcb5fbc2330031b",tooltip="Send Ack after receiving Data."];
  Node17 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="ns3::MacLow::StartDataTx\lTimers",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#ae7e8072b7d1f8b775000f6f07ee5a3c1",tooltip="Start a Data timer by scheduling appropriate Ack timeout."];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="ns3::MacLow::SendBlockAck\lResponse",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a85c374be43ba3bd52fd1ad6efdfef6c6",tooltip="This method creates BlockAck frame with header equals to blockAck and start its transmission."];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="ns3::MacLow::SendBlockAck\lAfterAmpdu",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#af6e2acc771d188c0959871f142912296",tooltip="Invoked after an A-MPDU has been received."];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="ns3::MacLow::GetBlockAck\lTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a227f7cf96af4e059f660cd6668869e69",tooltip="Return a TXVECTOR for the BlockAck frame given the destination and the mode of the Data used by the s..."];
  Node33 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="ns3::MacLow::GetResponse\lDuration",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#ae23ccb3c313c640daf5bd4c857eb0d7a",tooltip="Return the time required to transmit the response frames (Ack or BAR+BA following the policy configur..."];
  Node33 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="ns3::MacLow::GetCtsTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#abe2810a59020adbcf64abbef2bcf319f",tooltip="Return a TXVECTOR for the CTS frame given the destination and the mode of the RTS used by the sender."];
  Node39 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="ns3::MacLow::GetCtsTxVector\lForRts",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a10a0e90050844fe4273e1259fb23530f",tooltip="Return a TXVECTOR for the CTS frame given the destination and the mode of the RTS used by the sender."];
  Node39 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="ns3::MacLow::SendCtsAfterRts",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#aebcd4c3e8d64fb53af1f8a862c766e33",tooltip="Send CTS after receiving RTS."];
  Node1 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="ns3::WifiRemoteStationManager\l::GetDataTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wifi_remote_station_manager.html#a694863b2c3093952b2629e5a2d341a75",tooltip=" "];
  Node43 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="ns3::MacLow::GetDataTxVector",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#aeb3a8ccdb7a068b7ee69d507a66a1b60",tooltip="Return a TXVECTOR for the Data frame given the destination."];
  Node44 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="ns3::WaveMacLow::GetData\lTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wave_mac_low.html#a1bb1f43357a8c9513961eca42e104de4",tooltip="Return a TXVECTOR for the DATA frame given the destination."];
  Node43 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="ns3::WifiRemoteStationManager\l::NeedRts",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_wifi_remote_station_manager.html#a39ace4bf721e87a345bcd650f990ae3c",tooltip=" "];
  Node43 -> Node138 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node138 [label="PowerRateAdaptationTest\l::TestAparf",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_power_rate_adaptation_test.html#a3c3954526cb787125fea4c50cfe76174",tooltip="Test aparf function."];
  Node43 -> Node140 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node140 [label="PowerRateAdaptationTest\l::TestParf",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_power_rate_adaptation_test.html#a06db52c180644f3b961de054c41f2115",tooltip="Test parf function."];
  Node43 -> Node141 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node141 [label="PowerRateAdaptationTest\l::TestRrpaa",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_power_rate_adaptation_test.html#af0e5f044ed9bdf20dc203926ff8677b4",tooltip="Test rrpaa function."];
  Node1 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node142 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node142 [label="ns3::WifiRemoteStationManager\l::GetRtsTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wifi_remote_station_manager.html#af1d1d8ad08efe3fbe876c67c17e89ef2",tooltip=" "];
  Node142 -> Node143 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node143 [label="ns3::MacLow::GetRtsTxVector",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_mac_low.html#a89fbeddfe91a47f0dcc1f3d7fd5108a0",tooltip="Return a TXVECTOR for the RTS frame given the destination."];
  Node1 -> Node145 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node145 [label="ns3::WifiPpdu::GetTxVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wifi_ppdu.html#a43e190b01f0cd0d287416df16bb1de3a",tooltip="Get the TXVECTOR used to send the PPDU."];
  Node145 -> Node146 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node146 [label="ns3::WifiPpdu::GetTxDuration",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wifi_ppdu.html#a0a0af942d5c7af3f92666fcdef1d0460",tooltip="Get the total transmission duration of the PPDU."];
  Node1 -> Node147 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 [label="ns3::MinstrelHtWifiManager\l::IsValidMcs",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_minstrel_ht_wifi_manager.html#ae830b47b0301066a9e16fed61fc1882d",tooltip="Check the validity of a combination of number of streams, chWidth and mode."];
  Node147 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 -> Node148 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node148 [label="ns3::MinstrelHtWifiManager\l::RateInit",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classns3_1_1_minstrel_ht_wifi_manager.html#a3b59b889db624539c6d5af89fa5e9f74",tooltip="Initialize Minstrel Table."];
  Node1 -> Node160 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node160 [label="InterferenceExperiment\l::SendA",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_interference_experiment.html#a5b9bd711100dba8791513421a9641251",tooltip="Send A function."];
  Node160 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="InterferenceExperiment::Run",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_interference_experiment.html#ae31524d224c311c36d8b1dd5fcc9f269",tooltip="Run function."];
  Node1 -> Node162 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node162 [label="InterferenceExperiment\l::SendB",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_interference_experiment.html#afec7522f14a562b758f969ffdf02a6a1",tooltip="Send B function."];
  Node162 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="ns3::WaveNetDevice\l::SendX",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_wave_net_device.html#a99ec2b781006c6011a9667e064843b38",tooltip=" "];
  Node163 -> Node164 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node164 [label="WaveNetDeviceExample\l::SendOneWsmpPacket",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_wave_net_device_example.html#a2dc13b30baad7f9e0a3f23d3dc60557c",tooltip="Send one WSMP packet function."];
  Node163 -> Node166 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node166 [label="AnnexC_TestCase::SendPacket",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_annex_c___test_case.html#a6ad361d48194ad49b3856a12db4d4ea7",tooltip="Send packet function."];
  Node163 -> Node168 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node168 [label="ChannelRoutingTestCase\l::SendWsmp",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_channel_routing_test_case.html#a229a780a8f247ce4c37e164f204fbefe",tooltip="Send WSMP or other packets."];
  Node163 -> Node170 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node170 [label="ChannelAccessTestCase\l::SendX",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_channel_access_test_case.html#a372d321c372c644c86ff355e94704eaf",tooltip="Send X function."];
  Node1 -> Node172 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node172 [label="NodeStatistics::SetupPhy",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_node_statistics.html#a891b5ec279da73f698268df5fb520652",tooltip=" "];
}
