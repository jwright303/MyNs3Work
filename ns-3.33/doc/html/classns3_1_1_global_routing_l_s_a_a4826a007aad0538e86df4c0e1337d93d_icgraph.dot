digraph "ns3::GlobalRoutingLSA::GetLSType"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="RL";
  Node1 [label="ns3::GlobalRoutingLSA\l::GetLSType",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Return the LSType field of the LSA."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ns3::SPFVertex::SPFVertex",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_s_p_f_vertex.html#a44ad804fd17d8472216be5a3d4962df3",tooltip="Construct an initialized SPFVertex (Shortest Path First Vertex)."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ns3::GlobalRouteManagerLSDB\l::Insert",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_l_s_d_b.html#a832fe8b5361c7b4f680edfd98763346d",tooltip="Insert an IP address / Link State Advertisement pair into the Link State Database."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ns3::GlobalRouteManagerImpl\l::BuildGlobalRoutingDatabase",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#a4354ed5c5b4b26f9593991e9254a1370",tooltip="Build the routing database by gathering Link State Advertisements from each node exporting a GlobalRo..."];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="GlobalRouteManagerImplTest\lCase::DoRun",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_global_route_manager_impl_test_case.html#aed56fd8ecbd7ecaa5473b9793d0befc1",tooltip="Implementation to actually run this TestCase."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="ns3::GlobalRouteManagerImpl\l::SPFNext",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#aaa3d86729d6cfb61708d1c7083423da6",tooltip="Examine the links in v's LSA and update the list of candidates with any vertices not already on the l..."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="ns3::GlobalRouteManagerImpl\l::SPFCalculate",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#a03cdea3013a73c90ae8d67946b237c45",tooltip="Calculate the shortest path first (SPF) tree."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="ns3::GlobalRouteManagerImpl\l::DebugSPFCalculate",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#aaa692001ef22911e3483583b0de78909",tooltip="Debugging routine; call the core SPF from the unit tests."];
  Node8 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="ns3::GlobalRouteManagerImpl\l::InitializeRoutes",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#a25f57b2c41927c1a3f0bbba596accb6b",tooltip="Compute routes using a Dijkstra SPF computation and populate per-node forwarding tables."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="ns3::GlobalRouteManagerImpl\l::SPFNexthopCalculation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_global_route_manager_impl.html#ab082a78c423009f77c9cfe9018d40021",tooltip="Calculate nexthop from root through V (parent) to vertex W (destination) with given distance from roo..."];
  Node10 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
