digraph "ns3::Ipv4L3Protocol::Fragments"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="ns3::Ipv4L3Protocol\l::Fragments",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A Set of Fragment belonging to the same packet (src, dst, identification and proto)"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ns3::SimpleRefCount\l\< Fragments \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_simple_ref_count.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ns3::empty",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1empty.html",tooltip="make Callback use a separate empty type"];
  Node4 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Fragments \>" ,fontname="Helvetica"];
  Node4 [label="ns3::SimpleRefCount\l\< T, PARENT, DELETER \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_simple_ref_count.html",tooltip="A template-based reference counting class."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" m_fragments" ,fontname="Helvetica"];
  Node5 [label="std::list\< std::pair\l\< ns3::Ptr\< ns3::Packet\l \>, uint16_t \> \>",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::pair\< ns3::Ptr\l\< ns3::Packet \>, uint16_t \> \>" ,fontname="Helvetica"];
  Node6 [label="std::list\< T \>",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node7 [label="T",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" m_timeoutIter" ,fontname="Helvetica"];
  Node8 [label="std::list\< std::tuple\l\< Time, FragmentKey_t,\l Ipv4Header, uint32_t \> \>",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::tuple\< Time,\l FragmentKey_t, Ipv4Header,\l uint32_t \> \>" ,fontname="Helvetica"];
}
