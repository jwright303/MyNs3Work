digraph "ns3::Ipv4NixVectorRouting::GetAdjacentNetDevices"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="RL";
  Node1 [label="ns3::Ipv4NixVectorRouting\l::GetAdjacentNetDevices",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Given a net-device returns all the adjacent net-devices, essentially getting the neighbors on that ch..."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ns3::Ipv4NixVectorRouting::BFS",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#aba4436060833304f21000470702da6d9",tooltip="Breadth first search algorithm."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ns3::Ipv4NixVectorRouting\l::GetNixVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#aed0271392a3dcd6cff25edb9b5cdf1cb",tooltip="Takes in the source node and dest IP and calls GetNodeByIp, BFS, accounting for any output interface ..."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ns3::Ipv4NixVectorRouting\l::RouteOutput",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#ac7bbf06105fc46edc431bdc7be58f3e7",tooltip="Query routing cache for an existing route, for an outbound packet."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="ns3::Ipv4NixVectorRouting\l::BuildNixVector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#ac797bda1b70ad4c4aa7e8d5729a50455",tooltip="Recurses the parent vector, created by BFS and actually builds the nixvector."];
  Node5 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="ns3::Ipv4NixVectorRouting\l::FindNetDeviceForNixIndex",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#abbd212141a650d5260455663d59c24c9",tooltip="Nix index is with respect to the neighbors."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="ns3::Ipv4NixVectorRouting\l::RouteInput",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#a35d3d496fc0f96e1fd0106b353404c0c",tooltip="Route an input packet (to be forwarded or locally delivered)"];
  Node6 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="ns3::Ipv4NixVectorRouting\l::FindTotalNeighbors",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classns3_1_1_ipv4_nix_vector_routing.html#ae4d125bd51c2d70084543489f00060b5",tooltip="Simple iterates through the nodes net-devices and determines how many neighbors it has."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
